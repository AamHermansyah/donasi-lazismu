// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum CampaignStatus {
  RUNNING
  CLOSED
  REACHED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phoneNumber   String?
  institution   String?
  address       String?
  role          UserRole  @default(USER)
  berwakafTotal Int       @default(0)
  berwakafCount Int       @default(0)
  largestWakaf  Int       @default(0)

  accounts    Account[]
  campaigns   Campaign[]
  transaction Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Campaign {
  id            Int            @id @default(autoincrement())
  image         String
  title         String
  status        CampaignStatus @default(RUNNING)
  numberOfWakif Int            @default(0)
  target        Float
  category      String
  description   String
  phone         String
  creatorId     String
  remaining     Float
  collected     Float          @default(0)

  creator User @relation(fields: [creatorId], references: [id])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transaction Transaction[]
}

model Transaction {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  status             TransactionStatus @default(PENDING)
  numberOfWakif      Int?
  name               String
  isHiddenName       Boolean           @default(false)
  email              String
  amount             Float
  paymentMethodId    String
  paymentMethodLabel String
  message            String?
  userId             String
  campaignId         Int
  statementVerified  Boolean           @default(false)

  user     User?    @relation(fields: [userId], references: [id])
  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@index([userId])
  @@index([campaignId])
}
