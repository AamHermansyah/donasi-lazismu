// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum CampaignStatus {
  RUNNING
  CLOSED
  REACHED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  SUCCESS
  PENDING
  WARNING
  ERROR
  VERIFIED
  GENERAL
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  phoneNumber      String?
  institution      String?
  address          String?
  profession       String?
  role             UserRole  @default(USER)
  berwakafTotal    Int       @default(0)
  berwakafCount    Int       @default(0)
  largestWakaf     Int       @default(0)
  adminRecruitedAt DateTime?

  accounts          Account[]
  campaigns         Campaign[]
  transaction       Transaction[]
  notification      Notification[]
  campaignComment   CampaignComment[]
  withdrawalAccount WithdrawalAccount[]
  WithdrawalRequest WithdrawalRequest[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Notification {
  id            String           @id @default(cuid())
  userId        String?
  campaignId    Int?
  transactionId String?
  role          UserRole         @default(USER)
  type          NotificationType
  title         String
  message       String           @db.Text
  isRead        Boolean          @default(false)
  createdAt     DateTime         @default(now())

  user        User?        @relation(fields: [userId], references: [id])
  campaign    Campaign?    @relation(fields: [campaignId], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  @@index([userId])
  @@index([campaignId])
  @@index([transactionId])
}

model Campaign {
  id               Int            @id @default(autoincrement())
  image            String         @db.Text
  imageDetail1     String?        @db.Text
  imageDetail2     String?        @db.Text
  imageDetail3     String?        @db.Text
  imageDetail4     String?        @db.Text
  imageDetail5     String?        @db.Text
  title            String
  status           CampaignStatus @default(RUNNING)
  numberOfWakif    Int            @default(0)
  target           Float
  category         String
  description      String
  phone            String
  creatorId        String
  remaining        Float
  collected        Float          @default(0)
  availableBalance Float          @default(0)

  creator User @relation(fields: [creatorId], references: [id])

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  transaction       Transaction[]
  notification      Notification[]
  campaignComment   CampaignComment[]
  WithdrawalRequest WithdrawalRequest[]
}

model CampaignComment {
  id         Int      @id @default(autoincrement())
  comment    String   @db.Text
  userId     String
  campaignId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  campaign Campaign @relation(fields: [campaignId], references: [id])
}

model Transaction {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  status             TransactionStatus @default(PENDING)
  numberOfWakif      Int?
  name               String
  isHiddenName       Boolean           @default(false)
  email              String
  amount             Float
  paymentMethodId    String
  paymentMethodLabel String
  message            String?
  userId             String
  campaignId         Int
  statementVerified  Boolean           @default(false)
  snapToken          String?
  snapRedirectUrl    String?

  user         User?          @relation(fields: [userId], references: [id])
  campaign     Campaign       @relation(fields: [campaignId], references: [id])
  notification Notification[]

  @@index([userId])
  @@index([campaignId])
}

model WithdrawalAccount {
  id            String   @id @default(cuid())
  userId        String
  bankName      String
  accountNumber String
  accountHolder String
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model WithdrawalRequest {
  id                  String           @id @default(cuid())
  campaignId          Int
  amount              Float
  methodBankName      String
  methodAccountNumber String
  methodAccountHolder String
  description         String?          @db.Text
  status              WithdrawalStatus @default(PENDING)
  proofPayment        String?          @db.Text
  rejectedNote        String?
  signature           String?
  walletAddress       String?
  userId              String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@index([userId])
  @@index([campaignId])
}
